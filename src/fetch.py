from langchain_core.tools import tool
import requests
from bs4 import BeautifulSoup


# GENERATED BY AI
def parse_table_info(html)-> dict:
    data = {
        "форма обучения": None,
        "длительность": None,
        "язык обучения": None,
        "стоимость контрактного обучения (год)": None,
        "общежитие": None,
        "военный учебный центр": None,
        "гос. аккредитация": None,
        "дополнительные возможности": None
    }
    cards = html.find_all(attrs={'class': 'Information_card__rshys'})

    for card in cards:
        header = card.find('div', attrs={'class': 'Information_card__header__6PpVf'}).get_text(strip=True)
        value_div = card.find('div', attrs={'class': 'Information_card__text__txwcx'})
        
        # Проверяем, есть ли SVG (галочка)
        if value_div.find('svg'):
            value = "да"
        else:
            value = value_div.get_text(strip=True)
        
        if header in data:
            data[header] = value
    return data

# GENERATED BY AI
def parse_directions(html) -> list:
    directions = []
    for item in html.find_all(attrs={'class': 'Directions_table__item__206L0'}):
        header = item.find(attrs={'class': 'Directions_table__header__qV8_J'})
        code = header.find('p').get_text(strip=True)
        name = header.find('h5', attrs={'class': 'Directions_table__name__CklG5'}).get_text(strip=True)
        
        places_info = item.find('div', attrs={'class': 'Directions_table__info__HQR4Y'})
        places = places_info.find_all('div', attrs={'class': 'Directions_table__places__RWYBT'})
        
        budget = int(places[0].find('span').get_text(strip=True))
        target = int(places[1].find('span').get_text(strip=True))
        contract = int(places[2].find('span').get_text(strip=True))
        
        directions.append({
            "код": code,
            "название": name,
            "бюджетные места": budget,
            "целевые места": target,
            "контрактные места": contract
        })
    return directions

# GENERATED BY AI
def parse_about(html) -> dict:
    result = {
        "заголовок": None,
        "лидерская фраза": None,
        "описание": None
    }
    # Извлекаем заголовок
    header = html.find('h2', id='about')
    if header:
        result["заголовок"] = header.get_text(strip=True)
    
    # Извлекаем лидерскую фразу
    lead = html.find('span', class_='AboutProgram_aboutProgram__lead__SBgI1')
    if lead:
        result["лидерская фраза"] = lead.get_text(strip=True)
    
    # Извлекаем описание
    description = html.find('span', class_='AboutProgram_aboutProgram__description__Bf9LA')
    result["описание"] = description.text
    return result

def get_program_info(programm: str) -> dict:
    """
    Извлекает информацию о программе обучения из HTML-блока.
    Ипользуй для того чтобы сравнить программы.

    Принимает:
    programm: str - 'ai' или 'ai_product'

    Возвращает:
    'форма обучения', 'длительность', 'язык обучения', 'стоимость контрактного обучения (год)', 'общежитие', 'военный учебный центр', 'гос. аккредитация', 'дополнительные возможности', 'направления', 'заголовок', 'лидерская фраза', 'описание', 'Карьера'
    """
    response = requests.get(f"https://abit.itmo.ru/program/master/{programm}")
    html = response.text
    soup = BeautifulSoup(html, 'html.parser')

    table_html = soup.find(attrs={'class': 'Information_block__K_hTi container-xl'})
    data = parse_table_info(table_html)

    directions_lists_html = soup.find(attrs={'class': 'Directions_table__o3YjN'})
    data['направления'] = parse_directions(directions_lists_html)

    about_html = soup.find(attrs={'class': 'AboutProgram_aboutProgram__textBlock__LpASa'})
    data = data | parse_about(about_html)

    career = soup.find(attrs={'class': 'Career_career__container___st5X'})
    career = career.find('h5')
    data['карьера'] = career
    data['название'] = "Искусственный интеллект" if programm == 'ai' else "Управление ИИ-продуктами/AI Product"
    return data

if __name__ == '__main__':
    print(get_program_info('ai').keys())


@tool
def get_programs_info() -> dict:
    """
    Извлекает информацию о программах обучения.
    Ипользуй для того чтобы сравнить программы.

    Для каждой программы возвращает:
    'форма обучения', 'длительность', 'язык обучения', 'стоимость контрактного обучения (год)', 'общежитие', 'военный учебный центр', 'гос. аккредитация', 'дополнительные возможности', 'направления', 'заголовок', 'лидерская фраза', 'описание', 'карьера'
    """
    return {
        "ai": get_program_info('ai'),
        "ai_product": get_program_info('ai_product')
    }
